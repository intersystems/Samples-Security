ROUTINE OAUTH2.ZAUTHENTICATE
ZAUTHENTICATE(ServiceName, Namespace, Username, Password, Credentials, Properties) Public
{
	// This is from https://github.com/intersystems/Samples-Security
	// Use or operation of this code is subject to acceptance of the license available in the code 
	// repository for this code.

#include %occErrors
#include %occInclude
 
	// Sample ZAUTHENTICATE for delegated authentication based on OAuth 2.0 use of login page or %session.Login.
	// Use of %OAuth2.Login subclass for delegated authentication will result in called ZAUTHENTICATE with
	// query parameter CSPOAUTH2 = to the state value for the authorization request. The state value is passed to 
	// the sample ZAUTHENTICATE through Password.<br><br>
	//
	// This ZAUTHENTICATE may be used as a model for the ZAUTHENTICATE used to do delegated authentication
	// based on OAuth 2.0 by modifying this routine, copying it to %SYS namespace and renaming to ZAUTHENTICATE.mac.<br><br>
	//
	// Usually you will need to modify at least the roles to be assigned.
	set roles="%DB_DEFAULT,%Operator"
	
	$$$SysLog(3,"OAuth2","[ZAUTHENTICATE]","ServiceName="_ServiceName_", Username="_Username_", roles="_roles)
 
	set loginSuccessful=0
	set errorText=""
	try {		
		if ServiceName="%Service_WebGateway" {
			// Pickup state that was added to redirect URL
			// Sample ZAUTHENTICATE has the state value passed in through Password
			// This could also be written as: 
			//// set state=$get(%request.Data(##class(%OAuth2.Login).#SessionQueryParameter,1))
			set state=Password
			Set HashedToken = $zcrc(state,7) 
 
			// This ZAUTHENTICATE routine will support login using either 
			// an OAuth 2.0 login page which is a subclass of %OAuth2.Login or
			// having the user page call %session.Login after the access token has been obtained.
 			if Username="OAuth2"_HashedToken{
	 			// Authentication is via a subclass of %OAuth2.Login that sets the query parameter CSPOAUTH2
				// with a hash value that allows GetCurrentApplication to determine the application -- 
				// username/password is supplied by GetCredentials.
				set sc=##class(OAuth2.Response).GetCurrentApplication(.applicationName)
				set sessionId=%session.SessionId
 			} else {
	 			// If authentication is based on %session.Login, then application and session id are passed in.
	 			set applicationName=Username
				set sessionId=Password
 			}
			$$$SysLog(3,"OAuth2","[ZAUTHENTICATE]","state="_state_", session="_sessionId)
 
			if applicationName'="" {
				// Check if authorized
				set isAuthorized=##class(%SYS.OAuth2.AccessToken).IsAuthorized(applicationName,sessionId,,.accessToken,,,.error)
				if isAuthorized {
					// We need to obtain a user name in any way appropriate to the application.  Examples are:<br>
					// from JWT if access token is a JWT using ##class(%SYS.OAuth2.Validate).ValidateJWT,<br>
					// from IDToken if OpenID Connect using ##class(%SYS.OAuth2.Validate).ValidateIDToken,<br>
					// from Userinfo endpoint if OpenID Connect using ##class(%SYS.OAuth2.AccessToken).GetUserinfo or<br>
					// from introspection endpoint using ##class(%SYS.OAuth2.AccessToken).GetIntrospection.<br>
					// This example uses the sub property which is returned by the introspection endpoint.
					set sc=##class(%SYS.OAuth2.AccessToken).GetIntrospection(applicationName,accessToken,.jsonObject)
					if $$$ISERR(sc) {
						set errorText=$system.Status.GetErrorText(sc)
						quit
					}
 
					// Setup the new user.
					// Note that the user must not be a normal Cache user
					// in order to allow creation or update of the delegated user.
					set loginSuccessful=1
					set Username="OAuth2"_jsonObject.sub
					set Properties("FullName")="OAuth account "_Username
					set Properties("Username")=Username
					set Properties("Password")=""	// we don't really care about oauth2 account password
 
					// Set the roles and other Properties as appropriate.
					set Properties("Roles")=roles
 
				} elseif $isobject(error) {
					set errorText=error.AsString()
				}
			}
		}
	} Catch (ex) {
		set errorText=ex.DisplayString()
	}
 
	if loginSuccessful {
		$$$SysLog(3,"OAuth2","[ZAUTHENTICATE]","user="_Username)
		set sc=$$$OK
	} else {
		$$$SysLog(3,"OAuth2","[ZAUTHENTICATE]","error="_$select(errorText'="":errorText,1:"Access Denied"))
		set sc=$$$ERROR($$$AccessDenied)
	}
 
	quit sc
}
GetCredentials(ServiceName,Namespace,Username,Password,Credentials) Public {
	if ServiceName="%Service_WebGateway", $data(%request.Data(##class(%OAuth2.Login).#SessionQueryParameter),state) {
		// Supply user name and password for authentication via a subclass of %OAuth2.Login
		Set HashedToken = $zcrc(state,7) 
		set Username="OAuth2"_HashedToken
		// Pass state as password to save ourselves a lookup in ZAUTHENTICATE
		set Password=state
	}
	quit $$$OK
}
 
 



